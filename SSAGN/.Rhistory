plot(G(seq(from=70,to=74,by=0.001),72,par,100))
plot(G(seq(from=70,to=74,by=0.00001),72,par,100))
plot(G(seq(from=71.5,to=72.5,by=0.00001),72,par,100))
plot(G(seq(from=9,to=11,by=0.00001),10,par,100))
View(G)
par$zInf[100] - (par$zInf[100] - 10) * exp(-(par$kG[10]))
plot(G(seq(from=10.5,to=10.6,by=0.00001),10,par,100))
plot(G(seq(from=10.55,to=10.59,by=0.00001),10,par,100))
plot(G(seq(from=10.55,to=10.59,by=0.0000001),10,par,100))
plot(G(seq(from=10.570,to=10.577,by=0.0000001),10,par,100))
plot(G(seq(from=10.573,to=10.574,by=0.0000001),10,par,100))
par<-data.frame()
par<-p.all
par[1:365,]<-par[1,]
par$varKG[1:365,]<-10^-2
par$varKG<-.001
par$varKG<-.01
dKernsW<-FT.discretize(100,L=5.6,U=74,P=P,R=R,par=par,dates=1:365)
FT.d.eig.ts(dKernsW,plot=T)
dKernsW.c<-FT.d.accumulate(dKernsW)
FT.d.eig(dKernsW.c[[365]],v=T,p=T)
install.packages("C:/Users/Nathan Pollesch/Desktop/FishTranslator/FishTranslator_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Nathan Pollesch/Desktop/FishTranslator/FishTranslator_0.1.0 (1).tar.gz", repos = NULL, type = "source")
library('FishTranslator')
knitr::opts_chunk$set(echo = TRUE)
exps90<-data(Exposure90Day)
exps90<-Exposure90Day
Exposure90Day
View(Exposure90Day)
data(Exposure90Day)
install.packages("C:/Users/Nathan Pollesch/Desktop/FishTranslator/FishTranslator_0.1.0 (2).tar.gz", repos = NULL, type = "source")
library(FishTranslator)
library('FishTranslator')
p.all
install.packages("C:/Users/Nathan Pollesch/Desktop/FishTranslator/FishTranslator_0.1.0 (2).tar.gz", repos = NULL, type = "source")
library('FishTranslator')
data(Exposure90Day)
p.all
Exposure90Day
View(Exposure90Day)
install.packages(c("knitr", "markdown"))
install.packages(c("adaptMCMC", "bnlearn", "car", "curl", "data.table", "dfoptim", "digest", "doBy", "doParallel", "dplyr", "evaluate", "foreach", "GGally", "ggplot2", "gRbase", "highr", "hms", "igraph", "irlba", "iterators", "lazyeval", "lme4", "magick", "mgcv", "microbenchmark", "munsell", "NMF", "pillar", "pkgmaker", "plotrix", "progress", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "registry", "reshape2", "rjson", "rlang", "rmarkdown", "rngtools", "scales", "stringi", "utf8", "yaml"))
install.packages(c("data.table", "digest", "dplyr", "fansi", "gRbase", "haven", "magick", "mgcv", "openxlsx", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "rjson", "rlang", "sp", "stringi", "utf8", "yaml"))
unlink('C:/Users/Nathan Pollesch/Desktop/FT_Technical_Manual_cache', recursive = TRUE)
install.packages("C:/Users/Nathan Pollesch/Desktop/FishTranslator_0.1.0.tar.gz", repos = NULL, type = "source")
par<-data.frame()
par<-p.all
par[1:365,]<-p.all
dKerns<-FT.discretize(L=5.6,U=74,Pk=P,Rk=R,par=par,dates=1:365,n=100,order=3)
dKerns.c<-FT.d.accumulate(dKerns)
library(FishTranslator)
par<-data.frame()
par<-p.all
par[1:365,]<-p.all
dKerns<-FT.discretize(L=5.6,U=74,Pk=P,Rk=R,par=par,dates=1:365,n=100,order=3)
dKerns.c<-FT.d.accumulate(dKerns)
plot(dKerns.c[[365]]$dK[,100],ylab="Density",xlab="Size class",main="Annual transition from largest size class")
points(FT.d.eig(dKerns[[1]]$dK,vec=T,plot=F),col="Green")
par(mfrow=c(1,2))
plot(dKerns.c[[365]]$dK[,100],ylab="Density",xlab="Size class",main="Annual transition from largest size class")
FT.d.eig(dKerns[[1]]$dK,vec=T,plot=T,col="Green")
jd("21March2019")
jd("1July2019")
which(par$dailySpawnProb>0)
jd("22May2019")
jd("22May2018")
knitr::opts_chunk$set(echo = TRUE)
dKernsSWSp.c<-FT.d.accumulate(dKernsSW,index=c(143:365,1:143))
jd("1April2018")
which(par$survivalDecrement==max(par$survivalDecrement))
install.packages("igraph")
## CODE TO ACCOMPANY INTRO TO NETWORKS IN R MARKDOWN DOCUMENT ##
#### Load packages ####
library('igraph')
#### Build a network from scratch ####
### Edgelist approach ###
bridge.edgelist<-rbind(c(1,2),c(1,2),c(1,3),c(1,4),c(1,4),c(2,3),c(3,4))
bridge.edgelist
brgr.el<-graph_from_edgelist(bridge.edgelist,directed=FALSE)
plot(brgr.el)
### Adjacency matrix approach ###
r1<-c(0,2,1,2)
r2<-c(0,0,1,0)
r3<-c(0,0,0,1)
r4<-c(0,0,0,0)
bridge.adjmat<-rbind(r1,r2,r3,r4)
bridge.adjmat
brgr.am<-graph_from_adjacency_matrix(bridge.adjmat,mode="plus",weighted=NULL)
plot(brgr.am)
### Demonstrate the correspondence of the approaches ###
as_adjacency_matrix(brgr.el)
brgr.am.2<-graph_from_adjacency_matrix(as_adjacency_matrix(brgr.el),mode="plus")
plot(brgr.am.2)
as_adjacency_matrix(brgr.el,type="Upper")
brgr.am.2<-graph_from_adjacency_matrix(as_adjacency_matrix(brgr.el,type="Upper"),mode="plus")
plot(brgr.am.2)
as_edgelist(brgr.am)
brgr.el.2<-graph_from_edgelist(as_edgelist(brgr.am))
brgr.el.2==brgr.am.2
V(brgr.el.2)==V(brgr.am.2)
E(brgr.el.2)==E(brgr.am.2)
bridge.edgelist.dir<-rbind(c(1,2),c(2,1),c(1,3),c(1,4),c(4,1),c(2,3),c(3,4))
bridge.edgelist.dir
bridge.directed<-graph_from_edgelist(bridge.edgelist.dir,directed=TRUE)
plot(bridge.directed,edge.curved=T)
plot(bridge.directed)
r1<-c(0,1,1,1)
r2<-c(1,0,1,0)
r3<-c(0,0,0,1)
r4<-c(1,0,0,0)
bridge.adjmat.dir<-rbind(r1,r2,r3,r4)
bridge.adjmat.dir
bridge.directed<-graph_from_adjacency_matrix(bridge.adjmat.dir,mode="directed",weighted=NULL)
plot.igraph(bridge.directed)
r11<-c(0,2,2,2)
r22<-c(0,0,2,2)
r33<-c(0,0,0,2)
r44<-c(0,0,0,0)
exadjmat<-rbind(r11,r22,r33,r44)
ex.graph<-graph_from_adjacency_matrix(exadjmat,mode="plus",weighted=NULL)
plot(ex.graph)
r11<-c(0,1,1,1)
r22<-c(1,0,1,1)
r33<-c(1,1,0,1)
r44<-c(1,1,1,0)
exadjmat<-rbind(r11,r22,r33,r44)
ex2.graph<-graph_from_adjacency_matrix(exadjmat,mode="directed",weighted=NULL)
plot(ex2.graph,edge.curved=T)
plot(ex2.graph)
bg<-brgr.el
plot(bg)
V(bg)$name[1]<-"A"
V(bg)$name[2]<-"B"
V(bg)$name[3]<-"D"
V(bg)$name[4]<-"C"
V(bg)$name
bg
plot(bg)
library(FishTranslator)
View(S)
table("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT")
str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT")
library(stringr)
str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT")
?LETTERS
str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT",LETTERS)
length(str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT",LETTERS))
rbing(LETTERS,str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT",LETTERS))
rbind(LETTERS,str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT",LETTERS))
start.time<-Sys.time()
rbind(LETTERS,str_count("OBSERVETESTQUESTIONHYPOTHESIZEPREDICT",LETTERS))
end.time<-Sys.time()
plot_primes <- function(topnum, evens_above, odds_above, axis=T, box=F){
numbers <- 1:topnum
evens <- numbers[numbers %% 2==0]
odds <- numbers[numbers %% 2==1]
plot(1, type="n", xlab="", ylab="", xlim=c(0, topnum), ylim=c(-topnum-1,topnum+1), axes=F)
if(box) rect(xleft=0, ybottom=-topnum-1, xright=topnum, ytop=topnum+1)
if(axis==T) curve(0*x, from=0, to=topnum, add=T)
if(evens_above){
for (i in 1:length(evens)){
curve(evens[i]*sin(pi/evens[i]*x), to = topnum, add=T)
}
} else {
for (i in 1:length(evens)){
curve(-evens[i]*sin(pi/evens[i]*x), to = topnum, add=T)
}
if(odds_above){
for (i in 1:length(odds)){
curve(odds[i]*sin(pi/odds[i]*x), to = topnum, add=T)
}
} else {
for (i in 1:length(odds)){
curve(-odds[i]*sin(pi/odds[i]*x), to = topnum, add=T)
}
primes<- Primes(topnum)
primes.set <- primes[primes<=topnum]
points(x=primes.set, y=rep(0,length(primes.set)), pch=16)
}
install.packages("numbers")
library(numbers)
plot_primes(topnum=17, evens_above=F, odds_above=T, axis=T, box=F)
plot_primes(topnum=17, evens_above=F, odds_above=T, axis=T, box=T)
plot_primes(topnum=11, evens_above=F, odds_above=T, axis=T, box=T)
plot_primes(topnum=11, evens_above=F, odds_above=T, axis=T, box=F)
plot_primes(topnum=11, evens_above=F, odds_above=T, axis=F, box=F)
library("FishTranslator", lib.loc="~/R/win-library/3.3")
remove.packages("FishTranslator", lib="~/R/win-library/3.3")
install.packages("C:/Users/Nathan Pollesch/Google Drive/Research/FishTranslator/FishTranslator_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("truncnorm")
library(shiny)
install.packages("shiny")
shiny::runApp('GitHub/SSAGN/SSAGN')
install.packages("visNet")
install.packages("visNetwork")
install.packages("googledrive")
library(googledrive)
library("dplyr", lib.loc="~/R/win-library/3.3")
install.packages("dplyr")
library(googledrive)
setwd("~/GitHub/SSAGN/SSAGN")
# Import data for network
network_raw<-read.csv("data/CSTP_Network.csv")
View(network_raw)
# Import data for network
network_raw<-read.csv("data/CSTP_Network.csv")
View(network_raw)
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2)
nodes
View(nodes)
nodes<-rbind(nodes,data.frame(id=unique(network_raw$Affiliation1),Affiliation1=NA,Affiliation2=NA)
edges <- data.frame(from = c(1,2), to = c(2,3))
visNetwork(nodes, edges, main="Nate is learning Shiny", submain="It is going ok") %>%
visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
addFontAwesome() %>%
visLegend(addNodes = data.frame(label = c("A", "B"), shape = "icon",
icon.code = c("f0c0", "f007"),
icon.size = c(25,50),
icon.color = c(NA, "red")),
addEdges = data.frame(label = "link"), useGroups = FALSE)
})
nodes<-rbind(nodes,data.frame(id=unique(network_raw$Affiliation1),Affiliation1=NA,Affiliation2=NA))
data.frame(id=unique(network_raw$Affiliation1),Affiliation1=NA,Affiliation2=NA)
nodes<-rbind.fill(nodes,data.frame(id=unique(network_raw$Affiliation1)))
library(plyr)
nodes<-rbind.fill(nodes,data.frame(id=unique(network_raw$Affiliation1)))
nodes
View(nodes)
nodes<-rbind.fill(nodes,data.frame(id=unique(network_raw$Affiliation1)))
nodes
nodes<-rbind.fill(nodes,unique(network_raw$Affiliation1))
nodes
data.frame(id=unique(network_raw$Affiliation1))
nodes<-rbind.fill(nodes,data.frame(id=unique(network_raw$Affiliation.1)))
nodes
View(nodes)
rm.na(nodes)
remove.na(nodes)
na.omit(nodes)
nodes2<-na.omit(nodes)
View(nodes2)
network_raw<-read.csv("data/CSTP_Network.csv")
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2)
data.frame(id=unique(network_raw$Affiliation1),Affiliation1=NA,Affiliation2=NA)
nodes<-rbind.fill(nodes,data.frame(id=unique(network_raw$Affiliation.1)))
View(nodes2)
# Import data for network
network_raw<-read.csv("data/CSTP_Network.csv")
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1)))
View(nodes)
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports"))
View(nodes)
edges<-data.frame(from="Cafe Scientifique Twin Ports",to=unique(nodes$Affiliation1))
View(edges)
edges<-rbind(edges,data.frame(from=nodes$Affiliation1, to=nodes$Affiliation2))
View(edges)
edges<-rbind(edges,data.frame(from=nodes$Affiliation1, to=nodes$id))
View(edges)
edges<-data.frame(from="Cafe Scientifique Twin Ports",to=unique(nodes$Affiliation1))
View(edges)
edges<-data.frame(from="Cafe Scientifique Twin Ports",to=!is.na(unique(nodes$Affiliation1)))
View(edges)
edges<-data.frame(from="Cafe Scientifique Twin Ports",to=nodes$Affiliation1[which(!is.na(unique(nodes$Affiliation1)))])
View(edges)
edges<-rbind(edges,data.frame(from=nodes$Affiliation1, to=nodes$Affiliation2[which(!is.na(nodes$Affiliation2))]))
edges<-rbind(edges,data.frame(from=nodes$Affiliation1[which(!is.na(nodes$Affiliation1))], to=nodes$Affiliation2[which(!is.na(nodes$Affiliation2))]))
View(edges)
!is.na(nodes$Affiliation2)
nodes
View(nodes)
nodes[,2:3][which(!is.na(nodes$Affiliation2))]
nodes[,c(2,3)][which(!is.na(nodes$Affiliation2))]
nodes[,2][which(!is.na(nodes$Affiliation2))]
nodes[which(!is.na(nodes$Affiliation2))]
nodes[,2][which(!is.na(nodes$Affiliation2))]
test<-nodes[,2][which(!is.na(nodes$Affiliation2))]
test
View(test)
test<-nodes[,2][!is.na(nodes$Affiliation2)]
View(test)
test<-nodes[,2:3][!is.na(nodes$Affiliation2)]
test<-nodes[!is.na(nodes$Affiliation2),2:3][]
View(test)
test<-nodes[,2:3][,!is.na(nodes$Affiliation2)]
!is.na(nodes$Affiliation2)
test<-nodes[!is.na(nodes$Affiliation2),]
View(test)
test<-nodes[which(!is.na(nodes$Affiliation2)),]
View(test)
View(nodes)
unique(nodes$Affiliation2)
unique(nodes$Affiliation2)[1]
which(nodes$Afffilation2==unique(nodes$Affiliation2)[1])
which(nodes$Affilation2==unique(nodes$Affiliation2)[1])
which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
nodes
View(nodes)
test<-nodes[which(!is.na(nodes$Affiliation2)),]
View(test)
test<-nodes[which(!is.na(nodes$Affiliation2)),2:3]
View(test)
CSTPtoAf1<-cbind("Cafe Scientifique Twin Ports",nodes$Affiliation1[which(!is.na(unique(nodes$Affiliation1)))])
Af1toAf2<-nodes[which(!is.na(nodes$Affiliation2)),2:3]
CSTPtoAf1
Af1toAf2
Af1toAf2<-unique(nodes[which(!is.na(nodes$Affiliation2)),2:3])
Af1toAf2
# Build edges
# Build CSTP edges
CSTPtoAf1<-cbind("Cafe Scientifique Twin Ports",unique(nodes$Affiliation1[which(!is.na(nodes$Affiliation1))]))
CSTPtoAf1
# Build edges
# Build CSTP edges
CSTPtoAf1<-cbind("Cafe Scientifique Twin Ports",unique(nodes$Affiliation1[!is.na(nodes$Affiliation1)]))
CSTPtoAf1
# Build edges
# Build CSTP edges
CSTPtoAf1<-cbind("Cafe Scientifique Twin Ports",unique(nodes$Affiliation1))
CSTPtoAf1
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(cbind("Cafe Scientifique Twin Ports",nodes$Affiliation1))
CSTPtoAf1
nodes$Affiliation1
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(cbind(rep("Cafe Scientifique Twin Ports",as.character(nodes$Affiliation1[!is.na(nodes$Affiliation1)]))
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(cbind("Cafe Scientifique Twin Ports",as.character(nodes$Affiliation1[!is.na(nodes$Affiliation1)]))
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(cbind("Cafe Scientifique Twin Ports",as.character(nodes$Affiliation1[!is.na(nodes$Affiliation1)]))
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(cbind("Cafe Scientifique Twin Ports",as.character(nodes$Affiliation1[!is.na(nodes$Affiliation1)])))
CSTPtoAf1
CSTPtoAf1<-data.frame(from="Cafe Scientifique Twin Ports",to=nodes$Affiliation1[which(!is.na(unique(nodes$Affiliation1)))])
CSTPtoAf1
CSTPtoAf1<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$Affiliation1[which(!is.na(unique(nodes$Affiliation1)))]))
CSTPtoAf1
# Build nodes
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1)))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports"))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
View(nodes)
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$id[nodes$person]))
CSTPtoAf1
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=!is.na(nodes$id[nodes$person])))
CSTPtoAf1
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$id[nodes$person][!is.na]))
# Build nodes
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, person=T)
View(nodes)
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$id[nodes$person]))
CSTPtoAf1
# Build affiliation relationships
Af1toAf2<-unique(nodes[which(!is.na(nodes$Affiliation2)),2:3])
Af1toAf2
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1, person=F)))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports", person=F))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
View(nodes)
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1), person=F))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports", person=F))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
View(nodes)
# Build edges
# Build CSTP edges
CSTPtoAf1<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$id[nodes$person]))
CSTPtoAf1
# Build affiliation relationships
Af1toAf2<-unique(nodes[which(!is.na(nodes$Affiliation2)),2:3])
Af1toAf2
# Build affiliation relationships
Af1toAf2<-unique(data.frame(from=nodes[which(!is.na(nodes$Affiliation2)),2],to=nodes[which(!is.na(nodes$Affiliation2)),3]))
Af1toAf2
# Build people to affiliations1
Af1toPeeps<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation1[nodes$id[nodes$person]]))
Af1toPeeps
network_raw<-read.csv("data/CSTP_Network.csv")
# Build nodes
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1), person=F))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports", person=F))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
View(nodes)
# Build edges
# Build CSTP edges
CSTPtoPeeps<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$id[nodes$person]))
CSTPtoPeeps
# Build affiliation relationships
Af1toAf2<-unique(data.frame(from=nodes[which(!is.na(nodes$Affiliation2)),2],to=nodes[which(!is.na(nodes$Affiliation2)),3]))
Af1toAf2
# Build people to affiliations1
Af1toPeeps<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation2[nodes$id[nodes$person]]))
Af1toPeeps
# Build people to affiliations1
PeepstoAfl2<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation2[nodes$id[nodes$person]]))
PeepstoAfl2
# Build people to affiliations1
PeepstoAfl2<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation2[nodes$person]))
PeepstoAfl2
# Build people to affiliations1
PeepstoAf2<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation2[nodes$person]))
PeepstoAf2<-PeepstoAf2[,!is.na(PeepstoAf2[,2])]
PeepstoAf2<-PeepstoAf2[!is.na(PeepstoAf2[,2])]
PeepstoAf2<-PeepstoAf2[!is.na(PeepstoAf2[,2]),]
PeepstoAf2
edges<-rbind(CSTPtoPeeps,Af1toAf2,PeepstoAf2)
View(edges)
library(shiny)
library(visNetwork)
library(googledrive)
library(plyr)
# Import data and create network
network_raw<-read.csv("data/CSTP_Network.csv")
# Build nodes
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1), person=F))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports", person=F))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
View(nodes)
# Build edges
# Build CSTP edges
CSTPtoPeeps<-unique(data.frame(from="Cafe Scientifique Twin Ports",to=nodes$id[nodes$person]))
CSTPtoPeeps
# Build affiliation relationships
Af1toAf2<-unique(data.frame(from=nodes[which(!is.na(nodes$Affiliation2)),2],to=nodes[which(!is.na(nodes$Affiliation2)),3]))
Af1toAf2
# Build people to affiliations1
PeepstoAf2<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation2[nodes$person]))
PeepstoAf2<-PeepstoAf2[!is.na(PeepstoAf2[,2]),]
PeepstoAf2
edges<-rbind(CSTPtoPeeps,Af1toAf2,PeepstoAf2)
View(edges)
# Define UI for application that draws network
ui <- fluidPage(
visNetworkOutput("network_hello",height = "800px")
)
# Define server logic required to draw network
server <- function(input, output) {
output$network_hello<-renderVisNetwork({
#(chicken <- drive_upload(
#drive_example("chicken.csv"),
#"README-chicken.csv"
#))
visNetwork(nodes, edges, main="Nate is learning Shiny", submain="It is going ok")# %>%
#visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
#visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
#addFontAwesome() %>%
#visLegend(addNodes = data.frame(label = c("A", "B"), shape = "icon",
#                                icon.code = c("f0c0", "f007"),
#                                icon.size = c(25,50),
#                                icon.color = c(NA, "red")),
#          addEdges = data.frame(label = "link"), useGroups = FALSE)
})
}
# Run the application
shinyApp(ui = ui, server = server)
nodes$id
View(nodes)
table(nodes$id)
duplicated(nodes)
nodes[!duplicated(nodes)]
nodes[!duplicated(nodes),]
nodes<-nodes[!duplicated(nodes),]
duplicated(nodes)
runApp()
Af1toAf2
nodes
View(nodes)
nodesOnly<-nodes$id
runApp()
nodesOnly
nodesOnly<-data.frame(id=nodes$id)
runApp()
edges<-rbind(CSTPtoPeeps,Af1toAf2,PeepstoAf2,PeepstoAf1)
PeepstoAf1<-unique(data.frame(from=nodes$id[nodes$person],to=nodes$Affiliation1[nodes$person]))
edges<-rbind(CSTPtoPeeps,Af1toAf2,PeepstoAf2,PeepstoAf1)
View(edges)
runApp()
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, CSTPEventTitle=network_raw$Presentation.Title, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1), person=F))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports", person=F))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
nodes<-nodes[!duplicated(nodes),]
nodes <- data.frame(id = network_raw$Name, Affiliation1 = network_raw$Affiliation.1, Affiliation2 = network_raw$Affiliation.2, CSTPEventTitle=network_raw$Presentation.Title, person=T)
nodes<-rbind.fill(nodes,data.frame(id = unique(network_raw$Affiliation.1), person=F))
nodes<-rbind.fill(nodes,data.frame(id = "Cafe Scientifique Twin Ports", person=F))
nodes$Affiliation2[which(nodes$Affiliation2==unique(nodes$Affiliation2)[1])]<-NA
nodes<-nodes[!duplicated(nodes$id),]
View(nodes)
runApp()
View(nodes$id)
runApp()
nodes<-cbind(nodes,font.color="White",font.size=20)
runApp()
